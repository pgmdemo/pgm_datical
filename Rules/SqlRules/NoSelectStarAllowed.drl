package com.datical.prerules.forecast

/* 
@author Prakash Mistry
@version 1.001
@date Aug 16, 2018
@description Scan for statement with "Select [col1, col2..,a.]*[, colx, coly] from" pattern and raise Warning
*/


import com.datical.db.project.Project;
import com.datical.hammer.core.rules.Response;
import com.datical.hammer.core.rules.Response.ResponseType;
import com.datical.hammer.core.rules.WithComments;
import com.datical.hammer.core.rules.WithoutComments;
import com.datical.hammer.core.forecast.rules.RuleFunctions;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

function boolean hasSelectStar(String mySql)
{
		boolean itMatched = false;
		String mySql1 = new String();

		Pattern pattern0 = Pattern.compile("\'\'");
		Matcher matcher0 = pattern0.matcher(mySql) ;
	    mySql1 =    matcher0.replaceAll(" ").toString();

		Pattern pattern0 = Pattern.compile("\'.*\'");
		Matcher matcher0 = pattern0.matcher(mySql1) ;
	    mySql1 =    matcher0.replaceAll(" ").toString();

		Pattern pattern0 = Pattern.compile("\\s+");
		Matcher matcher0 = pattern0.matcher(mySql1) ;
	    mySql1 =  matcher0.replaceAll(" ").toLowerCase().toString();

		
		Pattern pSelectStar = Pattern.compile("select (([^*]|.*)\\*((?:!\bfrom\b)|.*)from)");
		
		for (String newSQl : mySql1.split("select")) {
		  Matcher mSelectStar = pSelectStar.matcher( "select "+newSQl.trim() );
			while(mSelectStar.find()) 
			{
				String comments =mSelectStar.group();
				System.out.println("Found Statement : "+comments );
				itMatched = true;
			}
		}
		return itMatched;
}

	
rule " Code with Select * "
    salience 91
    when
        wc : WithoutComments(hasSelectStar(getText())) 
    then
 		String errorMessage =  "\n File " + wc.getSqlFile().getName() + " Contains Select * Statement ";
        insert(new Response(ResponseType.FAIL, errorMessage, drools.getRule().getName()));
end
