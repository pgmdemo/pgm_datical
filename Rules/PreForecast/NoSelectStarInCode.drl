package com.datical.hammer.core.forecast


import java.util.List;
import java.util.ArrayList;
import com.datical.hammer.core.rules.Response;
import com.datical.hammer.core.rules.Response.ResponseType;
import com.datical.hammer.core.rules.GeneratedSQL;
 
function boolean fncheckCodehasSelectStar(String inputStr, String qryString ) {
	boolean inBlock = false;
   String[] sourceText = inputStr.split("\n");
   String filteredText = new String();
	for (String line: sourceText) {
	    StringBuilder newline = new StringBuilder();
		int i = 0;
		char[] ch = line.toCharArray();
	    boolean inLineComment = false;
		while(i< line.length()) {
			if (!inBlock && !inLineComment && (i+1 < line.length() ) && ch[i]=='/' && ch[i+1]=='*') {
			 inBlock=true;
			 i++;
			} else if (!inBlock && !inLineComment && (i+1 < line.length() ) && ch[i]=='-' && ch[i+1]=='-') {
			 inLineComment=true;
			 i++;
			} else if (inBlock && (i+1 < line.length() ) && ch[i]=='*' && ch[i+1]=='/') {
			 inBlock=false;
			 i++;
			} else if (!inBlock && !inLineComment) {
			  newline.append(ch[i]);
			} 
			i++;
		}
		if (newline.length() > 0 ) {
		  filteredText += newline.toString() ;
		}
   }
   
  System.out.println(" The Text is : \n" + filteredText.replaceAll("\\s+", " "));
  
  return filteredText.replaceAll("\\s+", " ").toLowerCase().contains( qryString.toLowerCase() ) ;
}


rule "Generated SQL should not contain Select * "
	salience 11
	when
	     genSQL : GeneratedSQL( srcSQL : outputSQL )
	then
	  if ( fncheckCodehasSelectStar ( srcSQL ," select * ") ) {
		String errorMessage = "The generated SQL contains Wild Select Statement 'Select *' , Not part of Good Coding Practice";
		insert(new Response(ResponseType.WARN, errorMessage, drools.getRule().getName()));
		}
	end
   