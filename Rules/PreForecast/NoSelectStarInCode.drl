package com.datical.hammer.core.forecast


import java.util.Collection;
import java.util.List;
import java.util.Arrays;
import java.util.ArrayList;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.collections.ListUtils;
import com.datical.hammer.core.rules.Response;
import com.datical.hammer.core.rules.Response.ResponseType;
import com.datical.hammer.core.rules.GeneratedSQL;

/*
function String fnStripOracleComments ( String inputStr ) {
	boolean inBlock = false;
	boolean inLineComment = false;
	String[] sourceText = inputStr.split("\n");
	List<String> filteredText = new ArrayList();
	StringBuilder newline = new StringBuilder();
	String cleanText ;
	for (String line: sourceText) {
		int i = 0;
		char[] chars = line.toCharArray();
		if (!inBlock) newline = new StringBuilder();
		inLineComment = false ;
		while (i < line.length()) {
				if (!inBlock && !inLineComment && i+1 < line.length() && chars[i] == '/' && chars[i+1] == '*') {
					inBlock = true;
					i++;
				} else if (inBlock && i+1 < line.length() && chars[i] == '*' && chars[i+1] == '/') {
					inBlock = false;
					i++;
				} else if (!inBlock && !inLineComment   && i+1 < line.length() && chars[i] == '-' && chars[i+1] == '-') {
					inLineComment = true ;
					i++;
				} else if (!inBlock && !inLineComment  ) {
					newline.append(chars[i]);
				}
				i++;
			}
		
		if (!inBlock && newline.length() > 0) {
				filteredText.add(new String(newline).trim() );
			}
		}
	return String.join(" ", filteredText ).replaceAll("\\s+", " ") ;

}

*/
 
function boolean fncheckCodehasSelectStar(String inputStr, String qryString ) {
	boolean inBlock = false;
   String[] sourceText = inputStr.split("\n");
	StringBuilder cleanTextSb = new StringBuilder();

	for (String line: sourceText) {
       System.out.println(" Input Text : " + line );	
	  StringBuilder newline = new StringBuilder();
	  
		int i = 0;
		char[] ch = line.toCharArray();
	    boolean inLineComment = false;
		while(i< line.length()) {
			if (!inBlock && !inLineComment && (i+1 < line.length() ) && ch[i]=='/' && ch[i+1]=='*') {
			 inBlock=true;
			 i++;
			} else if (!inBlock && !inLineComment && (i+1 < line.length() ) && ch[i]=='-' && ch[i+1]=='-') {
			 inLineComment=true;
			 i++;
			} else if (inBlock && (i+1 < line.length() ) && ch[i]=='*' && ch[i+1]=='/') {
			 inBlock=false;
			 i++;
			} else if (!inBlock && !inLineComment) {
			  newline.append(ch[i]);
			} 
			i++;
		}
		if (newline.length() > 0 ) {
		  cleanTextSb.append(newline) ;
		}
       System.out.println(" New Input Text : " + newline );	
   }
  String cleanText = cleanTextSb.toString();	
  System.out.println(" Comment Filtered Text : " + cleanText);	
  System.out.println(" Search String :"+ qryString ) ;
  return cleanText.replaceAll("\\s+", " ").toLowerCase().contains( qryString.toLowerCase() ) ;
}


rule "Generated SQL should not contain Select * "
	salience 11
	when
	     genSQL : GeneratedSQL( srcSQL : outputSQL )
	then
	  if ( fncheckCodehasSelectStar ( srcSQL ," select * ") ) {
		String errorMessage = "The generated SQL contains Wild Select Statement 'Select *'";
		insert(new Response(ResponseType.FAIL, errorMessage, drools.getRule().getName()));
		}
	end
   